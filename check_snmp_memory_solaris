#!/bin/bash

# check_snmp_memory_solaris
# Description : Checks physical memory usage on Solaris operation system
# Version : 1.0

# Commands
CMD_BASENAME="/bin/basename"
CMD_SNMPGET="/usr/bin/snmpget"
CMD_SNMPWALK="/usr/bin/snmpwalk"
CMD_AWK="/bin/awk"
CMD_GREP="/bin/grep"
CMD_BC="/usr/bin/bc"
CMD_EXPR="/usr/bin/expr"
CMD_SED="/bin/sed"

# Script name
SCRIPTNAME=`$CMD_BASENAME $0`

# Version
VERSION="1.0"

# Plugin return codes
STATE_OK=0
STATE_WARNING=1
STATE_CRITICAL=2
STATE_UNKNOWN=3

# RAM page size. On Solaris system get with pagesize command. Bytes.
PAGESIZE=4096

# HOST-RESOURCES-MIB::hrMemorySize, return in kilobytes. Universal OID. I will not use it.
# OID_MEM_TOTAL=".1.3.6.1.2.1.25.2.2" 

# All OID below are specific to Solaris OS
# I've create wrapper script /root/ramusage.sh with command
# echo ::memstat | mdb -k' in
# add in end of file /etc/net-snmp/snmp/snmpd.conf on Solaris system instruction
# extend ramusage /root/ramusage.sh

# Kernel: memory used for non-pageable kernel allocations
OID_MEM_KERNEL="NET-SNMP-EXTEND-MIB::nsExtendOutLine.\"ramusage\".3"

# ZFS Metadata
OID_MEM_ZFS_METADATA="NET-SNMP-EXTEND-MIB::nsExtendOutLine.\"ramusage\".4"

# ZFS File Data
OID_MEM_ZFS_FILEDATA="NET-SNMP-EXTEND-MIB::nsExtendOutLine.\"ramusage\".5"

# Anon: anonymous memory (process heaps, stack, share memory mappings, etc. etc.)
OID_MEM_ANON="NET-SNMP-EXTEND-MIB::nsExtendOutLine.\"ramusage\".6"

# Exec and libs: memory used for mapped files like executables and libraries
OID_MEM_EXECANDLIBS="NET-SNMP-EXTEND-MIB::nsExtendOutLine.\"ramusage\".7"

# Page cache: amount of unmapped page cache including data stored in /tmp
OID_MEM_PAGECACHE="NET-SNMP-EXTEND-MIB::nsExtendOutLine.\"ramusage\".8"

# Free (cachelist): amount of page cache on free list, majority used by file system caches
OID_MEM_CACHELIST="NET-SNMP-EXTEND-MIB::nsExtendOutLine.\"ramusage\".9"

# Free (freelist): amount of memory that is actually really free
OID_MEM_FREELIST="NET-SNMP-EXTEND-MIB::nsExtendOutLine.\"ramusage\".10"

# Total memory in system
OID_MEM_TOTAL="NET-SNMP-EXTEND-MIB::nsExtendOutLine.\"ramusage\".11"

# Default variables
DESCRIPTION="Unknown"
STATE=$STATE_UNKNOWN

# Default options
COMMUNITY="public"
HOSTNAME="127.0.0.1"
WARNING=0
CRITICAL=0

# Option processing
print_usage() {
  echo "Usage: ./check_snmp_memory -H 127.0.0.1 -C public -w 80 -c 90"
  echo "  $SCRIPTNAME -H ADDRESS"
  echo "  $SCRIPTNAME -C STRING"
  echo "  $SCRIPTNAME -w INTEGER"
  echo "  $SCRIPTNAME -c INTEGER"
  echo "  $SCRIPTNAME -h"
  echo "  $SCRIPTNAME -V"
}

print_version() {
  echo $SCRIPTNAME version $VERSION
  echo ""
  echo "This nagios plugins come with ABSOLUTELY NO WARRANTY."
  echo "You may redistribute copies of the plugins under the terms of the GNU General Public License v2."
}

print_help() {
  print_version
  echo ""
  print_usage
  echo ""
  echo "Checks memory and swap usage on Windows or Linux Server"
  echo ""
  echo "-H ADDRESS"
  echo "   Name or IP address of host (default: 127.0.0.1)"
  echo "-C STRING"
  echo "   Community name for the host's SNMP agent (default: public)"
  echo "-w INTEGER"
  echo "   Warning level for memory usage in percent (default: 0)"
  echo "-c INTEGER"
  echo "   Critical level for memory usage in percent (default: 0)"
  echo "-h"
  echo "   Print this help screen"
  echo "-V"
  echo "   Print version and license information"
  echo ""
  echo ""
  echo "This plugin uses the 'snmpget' command included with the NET-SNMP package."
  echo "This plugin support performance data output."
  echo "If the percentage of the warning and critical levels are set to 0, then the script returns a OK state."
}

while getopts H:C:w:c:hV OPT
do
  case $OPT in
    H) HOSTNAME="$OPTARG" ;;
    C) COMMUNITY="$OPTARG" ;;
    w) WARNING=$OPTARG ;;
    c) CRITICAL=$OPTARG ;;
    h)
      print_help
      exit $STATE_UNKNOWN
      ;;
    V)
      print_version
      exit $STATE_UNKNOWN
      ;;
   esac
done

# Plugin processing
size_convert() {
  if [ $VALUE -ge 1073741824 ]; then
    VALUE=`echo "scale=2 ; ( ( $VALUE / 1024 ) / 1024 ) / 1024" | $CMD_BC`
    VALUE="$VALUE GB"
  elif [ $VALUE -ge 1048576 ]; then
    VALUE=`echo "scale=2 ; ( $VALUE / 1024 ) / 1024" | $CMD_BC`
    VALUE="$VALUE MB"
  elif [ $VALUE -ge 1024 ]; then
    VALUE=`echo "scale=2 ; $VALUE / 1024" | $CMD_BC`
    VALUE="$VALUE KB"
  else
    VALUE="$VALUE Octets"
  fi
}

SNMPGETLINE=`$CMD_SNMPGET -t 2 -r 2 -v 2c -c $COMMUNITY -OvqU $HOSTNAME ${OID_MEM_KERNEL}`
MEMORY_KERNEL_PAGES=`echo $SNMPGETLINE | $CMD_AWK '{ print $2}'`
MEMORY_KERNEL_BYTES=`$CMD_EXPR $MEMORY_KERNEL_PAGES \* $PAGESIZE`
VALUE=$MEMORY_KERNEL_BYTES
size_convert
MEMORY_KERNEL_FORMAT=$VALUE
MEMORY_KERNEL_POURCENT=`echo $SNMPGETLINE | $CMD_AWK '{ print $4}' | $CMD_SED 's/.$//'`

SNMPGETLINE=`$CMD_SNMPGET -t 2 -r 2 -v 2c -c $COMMUNITY -OvqU $HOSTNAME ${OID_MEM_ZFS_METADATA}`
MEMORY_ZFSMET_PAGES=`echo $SNMPGETLINE | $CMD_AWK '{ print $3}'`
MEMORY_ZFSMET_BYTES=`$CMD_EXPR $MEMORY_ZFSMET_PAGES \* $PAGESIZE`
VALUE=$MEMORY_ZFSMET_BYTES
size_convert
MEMORY_ZFSMET_FORMAT=$VALUE
MEMORY_ZFSMET_POURCENT=`echo $SNMPGETLINE | $CMD_AWK '{ print $5}' | $CMD_SED 's/.$//'`

SNMPGETLINE=`$CMD_SNMPGET -t 2 -r 2 -v 2c -c $COMMUNITY -OvqU $HOSTNAME ${OID_MEM_ZFS_FILEDATA}`
MEMORY_ZFSFDT_PAGES=`echo $SNMPGETLINE | $CMD_AWK '{ print $4}'`
MEMORY_ZFSFDT_BYTES=`$CMD_EXPR $MEMORY_ZFSFDT_PAGES \* $PAGESIZE`
VALUE=$MEMORY_ZFSFDT_BYTES
size_convert
MEMORY_ZFSFDT_FORMAT=$VALUE
MEMORY_ZFSFDT_POURCENT=`echo $SNMPGETLINE | $CMD_AWK '{ print $6}' | $CMD_SED 's/.$//'`

SNMPGETLINE=`$CMD_SNMPGET -t 2 -r 2 -v 2c -c $COMMUNITY -OvqU $HOSTNAME ${OID_MEM_ANON}`
MEMORY_ANONMS_PAGES=`echo $SNMPGETLINE | $CMD_AWK '{ print $2}'`
MEMORY_ANONMS_BYTES=`$CMD_EXPR $MEMORY_ANONMS_PAGES \* $PAGESIZE`
VALUE=$MEMORY_ANONMS_BYTES
size_convert
MEMORY_ANONMS_FORMAT=$VALUE
MEMORY_ANONMS_POURCENT=`echo $SNMPGETLINE | $CMD_AWK '{ print $4}' | $CMD_SED 's/.$//'`

SNMPGETLINE=`$CMD_SNMPGET -t 2 -r 2 -v 2c -c $COMMUNITY -OvqU $HOSTNAME ${OID_MEM_EXECANDLIBS}`
MEMORY_EXELIB_PAGES=`echo $SNMPGETLINE | $CMD_AWK '{ print $4}'`
MEMORY_EXELIB_BYTES=`$CMD_EXPR $MEMORY_EXELIB_PAGES \* $PAGESIZE`
VALUE=$MEMORY_EXELIB_BYTES
size_convert
MEMORY_EXELIB_FORMAT=$VALUE
MEMORY_EXELIB_POURCENT=`echo $SNMPGETLINE | $CMD_AWK '{ print $6}' | $CMD_SED 's/.$//'`

SNMPGETLINE=`$CMD_SNMPGET -t 2 -r 2 -v 2c -c $COMMUNITY -OvqU $HOSTNAME ${OID_MEM_PAGECACHE}`
MEMORY_PCACHE_PAGES=`echo $SNMPGETLINE | $CMD_AWK '{ print $3}'`
MEMORY_PCACHE_BYTES=`$CMD_EXPR $MEMORY_PCACHE_PAGES \* $PAGESIZE`
VALUE=$MEMORY_PCACHE_BYTES
size_convert
MEMORY_PCACHE_FORMAT=$VALUE
MEMORY_PCACHE_POURCENT=`echo $SNMPGETLINE | $CMD_AWK '{ print $5}' | $CMD_SED 's/.$//'`

SNMPGETLINE=`$CMD_SNMPGET -t 2 -r 2 -v 2c -c $COMMUNITY -OvqU $HOSTNAME ${OID_MEM_CACHELIST}`
MEMORY_CACHEL_PAGES=`echo $SNMPGETLINE | $CMD_AWK '{ print $3}'`
MEMORY_CACHEL_BYTES=`$CMD_EXPR $MEMORY_CACHEL_PAGES \* $PAGESIZE`
VALUE=$MEMORY_CACHEL_BYTES
size_convert
MEMORY_CACHEL_FORMAT=$VALUE
MEMORY_CACHEL_POURCENT=`echo $SNMPGETLINE | $CMD_AWK '{ print $5}' | $CMD_SED 's/.$//'`

SNMPGETLINE=`$CMD_SNMPGET -t 2 -r 2 -v 2c -c $COMMUNITY -OvqU $HOSTNAME ${OID_MEM_FREELIST}`
MEMORY_FRELST_PAGES=`echo $SNMPGETLINE | $CMD_AWK '{ print $3}'`
MEMORY_FRELST_BYTES=`$CMD_EXPR $MEMORY_FRELST_PAGES \* $PAGESIZE`
VALUE=$MEMORY_FRELST_BYTES
size_convert
MEMORY_FRELST_FORMAT=$VALUE
MEMORY_FRELST_POURCENT=`echo $SNMPGETLINE | $CMD_AWK '{ print $5}' | $CMD_SED 's/.$//'`

SNMPGETLINE=`$CMD_SNMPGET -t 2 -r 2 -v 2c -c $COMMUNITY -OvqU $HOSTNAME ${OID_MEM_TOTAL}`
MEMORY_TOTAL__PAGES=`echo $SNMPGETLINE | $CMD_AWK '{ print $2}'`
MEMORY_TOTAL__BYTES=`$CMD_EXPR $MEMORY_TOTAL__PAGES \* $PAGESIZE`
VALUE=$MEMORY_TOTAL__BYTES
size_convert
MEMORY_TOTAL__FORMAT=$VALUE
MEMORY_TOTAL__POURCENT=100

#echo MEMORY_KERNEL $MEMORY_KERNEL_PAGES $MEMORY_KERNEL_BYTES $MEMORY_KERNEL_FORMAT $MEMORY_KERNEL_POURCENT%
#echo MEMORY_ZFSMET $MEMORY_ZFSMET_PAGES $MEMORY_ZFSMET_BYTES $MEMORY_ZFSMET_FORMAT $MEMORY_ZFSMET_POURCENT%
#echo MEMORY_ZFSFDT $MEMORY_ZFSFDT_PAGES $MEMORY_ZFSFDT_BYTES $MEMORY_ZFSFDT_FORMAT $MEMORY_ZFSFDT_POURCENT%
#echo MEMORY_ANONMS $MEMORY_ANONMS_PAGES $MEMORY_ANONMS_BYTES $MEMORY_ANONMS_FORMAT $MEMORY_ANONMS_POURCENT%
#echo MEMORY_EXELIB $MEMORY_EXELIB_PAGES $MEMORY_EXELIB_BYTES $MEMORY_EXELIB_FORMAT $MEMORY_EXELIB_POURCENT%
#echo MEMORY_PCACHE $MEMORY_PCACHE_PAGES $MEMORY_PCACHE_BYTES $MEMORY_PCACHE_FORMAT $MEMORY_PCACHE_POURCENT%
#echo MEMORY_CACHEL $MEMORY_CACHEL_PAGES $MEMORY_CACHEL_BYTES $MEMORY_CACHEL_FORMAT $MEMORY_CACHEL_POURCENT%
#echo MEMORY_FRELST $MEMORY_FRELST_PAGES $MEMORY_FRELST_BYTES $MEMORY_FRELST_FORMAT $MEMORY_FRELST_POURCENT%
#echo MEMORY_TOTAL_ $MEMORY_TOTAL__PAGES $MEMORY_TOTAL__BYTES $MEMORY_TOTAL__FORMAT $MEMORY_TOTAL__POURCENT%

if [ $MEMORY_FRELST_PAGES -eq 0 ] ; then
	STATE=$STATE_CRITICAL
else
	STATE=$STATE_OK
fi
PERFDATA_WARNING=0
PERFDATA_CRITICAL=$MEMORY_TOTAL__BYTES

DESCRIPTION="Physical Memory usage : $MEMORY_FRELST_FORMAT (${MEMORY_FRELST_POURCENT}%) amount of memory that is actually really free of ${MEMORY_TOTAL__FORMAT}"

DESCRIPTION="${DESCRIPTION}| kernel=${MEMORY_KERNEL_BYTES}B;$PERFDATA_WARNING;$PERFDATA_CRITICAL;0;$MEMORY_TOTAL__BYTES ZFS_Metadata=${MEMORY_ZFSMET_BYTES}B;$PERFDATA_WARNING;$PERFDATA_CRITICAL;0;$MEMORY_TOTAL__BYTES ZFS_File_Data=${MEMORY_ZFSFDT_BYTES}B;$PERFDATA_WARNING;$PERFDATA_CRITICAL;0;$MEMORY_TOTAL__BYTES Anon=${MEMORY_ANONMS_BYTES}B;$PERFDATA_WARNING;$PERFDATA_CRITICAL;0;$MEMORY_TOTAL__BYTES Exec_and_Libs=${MEMORY_EXELIB_BYTES}B;$PERFDATA_WARNING;$PERFDATA_CRITICAL;0;$MEMORY_TOTAL__BYTES Page_cache=${MEMORY_PCACHE_BYTES}B;$PERFDATA_WARNING;$PERFDATA_CRITICAL;0;$MEMORY_TOTAL__BYTES Free(cachelist)=${MEMORY_CACHEL_BYTES}B;$PERFDATA_WARNING;$PERFDATA_CRITICAL;0;$MEMORY_TOTAL__BYTES Free(freelist)=${MEMORY_FRELST_BYTES}B;$PERFDATA_WARNING;0;0;$MEMORY_TOTAL__BYTES Total_Memory=${MEMORY_TOTAL__BYTES};0;0;0;0"

echo $DESCRIPTION
exit $STATE
