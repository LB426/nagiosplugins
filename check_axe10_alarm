#!/bin/bash

# check_axe10_alarm
# Description : Checks alarm on Ericsson AXE10 PSTN exchange
# Version : 1.0

# Commands
CMD_BASENAME="/bin/basename"
CMD_AWK="/bin/awk"
CMD_GREP="/bin/grep"
CMD_BC="/usr/bin/bc"
CMD_EXPR="/usr/bin/expr"
CMD_SED="/bin/sed"
CMD_CAT="/bin/cat"
CMD_CURL="/usr/bin/curl"
CMD_CUT="/bin/cut"
CMD_TR="/bin/tr"
CMD_ICONV="/bin/iconv"

# Script name
SCRIPTNAME=`$CMD_BASENAME $0`

# Version
VERSION="1.0"

# Plugin return codes
STATE_OK=0
STATE_WARNING=1
STATE_CRITICAL=2
STATE_UNKNOWN=3

# Default variables
DESCRIPTION="Unknown"
STATE=$STATE_UNKNOWN

# Default options
HOST="127.0.0.1"
WARNING=0
CRITICAL=0
ENCFROM="utf8"
ENCTO="utf8"

# Option processing
print_usage() {
  echo "Usage: ./check_snmp_memory -H 127.0.0.1 -C public -w 80 -c 90"
  echo "  $SCRIPTNAME -H ADDRESS"
  echo "  $SCRIPTNAME -w INTEGER"
  echo "  $SCRIPTNAME -c INTEGER"
  echo "  $SCRIPTNAME -h"
  echo "  $SCRIPTNAME -V"
}

print_version() {
  echo $SCRIPTNAME version $VERSION
  echo ""
  echo "This nagios plugins come with ABSOLUTELY NO WARRANTY."
  echo "You may redistribute copies of the plugins under the terms of the GNU General Public License v2."
}

print_help() {
  print_version
  echo ""
  print_usage
  echo ""
  echo "Check alarm on Ericsson AXE10 PSTN exchange"
  echo ""
  echo "-H ADDRESS"
  echo "   Name or IP address of host (default: 127.0.0.1)"
  echo "-w INTEGER"
  echo "   Warning level for memory usage in percent (default: 0)"
  echo "-c INTEGER"
  echo "   Critical level for memory usage in percent (default: 0)"
  echo "-h"
  echo "   Print this help screen"
  echo "-V"
  echo "   Print version and license information"
  echo "-f"
  echo "   Encoding: from, like iconv"
  echo "-t"
  echo "   Encoding: to, like iconv"
  echo ""
  echo ""
  echo ""
  echo "This plugin uses the 'curl' command."
  echo "This plugin NO support performance data output."
  echo "If the percentage of the warning and critical levels are set to 0, then the script returns a OK state."
}

while getopts H:f:t:w:c:hV OPT
do
  case $OPT in
    H) HOST="$OPTARG" ;;
    f) ENCFROM=$OPTARG ;;
    t) ENCTO=$OPTARG ;;
    w) WARNING=$OPTARG ;;
    c) CRITICAL=$OPTARG ;;
    h)
      print_help
      exit $STATE_UNKNOWN
      ;;
    V)
      print_version
      exit $STATE_UNKNOWN
      ;;
   esac
done
#if [ "$OPT" == "?" ]; then
#    echo "No specified parameters. Get help with -h option."
#    exit $STATE_UNKNOWN
#fi

# Plugin processing
size_convert() {
  if [ $VALUE -ge 1073741824 ]; then
    VALUE=`echo "scale=2 ; ( ( $VALUE / 1024 ) / 1024 ) / 1024" | $CMD_BC`
    VALUE="$VALUE GB"
  elif [ $VALUE -ge 1048576 ]; then
    VALUE=`echo "scale=2 ; ( $VALUE / 1024 ) / 1024" | $CMD_BC`
    VALUE="$VALUE MB"
  elif [ $VALUE -ge 1024 ]; then
    VALUE=`echo "scale=2 ; $VALUE / 1024" | $CMD_BC`
    VALUE="$VALUE KB"
  else
    VALUE="$VALUE Pages"
  fi
}

# remove tmp files
remove_tmp_files() {
        if [ -f $FILE_AXE10_ALARM ]; then
                rm -rf $FILE_AXE10_ALARM
        fi
        if [ -f $FILE_CURL_ERRORS ]; then
                rm -rf $FILE_CURL_ERRORS
        fi
}

FILE_AXE10_ALARM="/tmp/axe10_alarm_$HOST"
FILE_CURL_ERRORS="/tmp/axe10_curl_error_$HOST"
remove_tmp_files

$CMD_CURL http://$HOST:8000/ -o $FILE_AXE10_ALARM 2>$FILE_CURL_ERRORS
ERRORS=`$CMD_CAT $FILE_CURL_ERRORS | $CMD_GREP "couldn't connect to host"`
if [[ "$ERRORS" == *"couldn't connect to host"* ]]; then
        STATE=$STATE_CRITICAL
	DESCRIPTION="нет подключения к агенту"
else
	if [ -f $FILE_AXE10_ALARM ]; then
		STATUSLINE=`$CMD_CAT $FILE_AXE10_ALARM`
		STATUSLINE=`echo $STATUSLINE | $CMD_TR -d '\r'`
		STATE=`echo $STATUSLINE | $CMD_AWK -F\| '{print $1;}'`
		ALARMS=`echo $STATUSLINE | $CMD_CUT -c 3- | $CMD_SED 's/|/; /g'`
		DESCRIPTION=`echo $ALARMS | $CMD_ICONV -f $ENCFROM -t $ENCTO`
		if [ -z "${DESCRIPTION}" ]; then
			DESCRIPTION="no alarm"
		fi
	else
		STATE=$STATE_CRITICAL
		DESCRIPTION="нет подключения к агенту"
	fi
fi

remove_tmp_files

OUTPUT="ATS alarms: ${DESCRIPTION}"

echo $OUTPUT
exit $STATE
