#!/bin/bash

# check_snmp_zpoolusage_solaris
# Description : Checks usage of zpools on Solaris OS
# Version : 1.0

# Commands
CMD_BASENAME="/bin/basename"
CMD_SNMPGET="/usr/bin/snmpget"
CMD_SNMPWALK="/usr/bin/snmpwalk"
CMD_AWK="/bin/awk"
CMD_GREP="/bin/grep"
CMD_BC="/usr/bin/bc"
CMD_EXPR="/usr/bin/expr"
CMD_SED="/bin/sed"
CMD_CAT="/bin/cat"

# Script name
SCRIPTNAME=`$CMD_BASENAME $0`

# Version
VERSION="1.0"

# Plugin return codes
STATE_OK=0
STATE_WARNING=1
STATE_CRITICAL=2
STATE_UNKNOWN=3

# Default variables
DESCRIPTION="Unknown"
STATE=$STATE_UNKNOWN

# Default options
COMMUNITY="public"
HOSTNAME="127.0.0.1"
WARNING=0
CRITICAL=0

# Option processing
print_usage() {
  echo "Usage: ./check_snmp_memory -H 127.0.0.1 -C public -w 80 -c 90"
  echo "  $SCRIPTNAME -H ADDRESS"
  echo "  $SCRIPTNAME -C STRING"
  echo "  $SCRIPTNAME -w INTEGER"
  echo "  $SCRIPTNAME -c INTEGER"
  echo "  $SCRIPTNAME -h"
  echo "  $SCRIPTNAME -V"
}

print_version() {
  echo $SCRIPTNAME version $VERSION
  echo ""
  echo "This nagios plugins come with ABSOLUTELY NO WARRANTY."
  echo "You may redistribute copies of the plugins under the terms of the GNU General Public License v2."
}

print_help() {
  print_version
  echo ""
  print_usage
  echo ""
  echo "Checks memory and swap usage on Windows or Linux Server"
  echo ""
  echo "-H ADDRESS"
  echo "   Name or IP address of host (default: 127.0.0.1)"
  echo "-C STRING"
  echo "   Community name for the host's SNMP agent (default: public)"
  echo "-w INTEGER"
  echo "   Warning level for memory usage in percent (default: 0)"
  echo "-c INTEGER"
  echo "   Critical level for memory usage in percent (default: 0)"
  echo "-h"
  echo "   Print this help screen"
  echo "-V"
  echo "   Print version and license information"
  echo ""
  echo ""
  echo "This plugin uses the 'snmpget' command included with the NET-SNMP package."
  echo "This plugin support performance data output."
  echo "If the percentage of the warning and critical levels are set to 0, then the script returns a OK state."
}

while getopts H:C:w:c:hV OPT
do
  case $OPT in
    H) HOSTNAME="$OPTARG" ;;
    C) COMMUNITY="$OPTARG" ;;
    w) WARNING=$OPTARG ;;
    c) CRITICAL=$OPTARG ;;
    h)
      print_help
      exit $STATE_UNKNOWN
      ;;
    V)
      print_version
      exit $STATE_UNKNOWN
      ;;
   esac
done

# Plugin processing
size_convert() {
  if [ $VALUE -ge 1073741824 ]; then
    VALUE=`echo "scale=2 ; ( ( $VALUE / 1024 ) / 1024 ) / 1024" | $CMD_BC`
    VALUE="$VALUE GB"
  elif [ $VALUE -ge 1048576 ]; then
    VALUE=`echo "scale=2 ; ( $VALUE / 1024 ) / 1024" | $CMD_BC`
    VALUE="$VALUE MB"
  elif [ $VALUE -ge 1024 ]; then
    VALUE=`echo "scale=2 ; $VALUE / 1024" | $CMD_BC`
    VALUE="$VALUE KB"
  else
    VALUE="$VALUE Pages"
  fi
}

STATE_FLAG_CRIT=0
STATE_FLAG_WARN=0

NUMBER_OF_LINES=`$CMD_SNMPGET -t 2 -r 2 -v 2c -c $COMMUNITY -OvqU $HOSTNAME NET-SNMP-EXTEND-MIB::nsExtendOutNumLines.\"zpoolusage\"`
for (( i = 2 ; i <= $NUMBER_OF_LINES ; i++))
do 
	ZPOOL_NAME=`$CMD_SNMPGET -t 2 -r 2 -v 2c -c $COMMUNITY -OvqU $HOSTNAME NET-SNMP-EXTEND-MIB::nsExtendOutLine.\"zpoolusage\".$i | $CMD_AWK '{print $1}'`
	ZPOOL_SIZE=`$CMD_SNMPGET -t 2 -r 2 -v 2c -c $COMMUNITY -OvqU $HOSTNAME NET-SNMP-EXTEND-MIB::nsExtendOutLine.\"zpoolusage\".$i | $CMD_AWK '{print $2}'`
	ZPOOL_ALLOC=`$CMD_SNMPGET -t 2 -r 2 -v 2c -c $COMMUNITY -OvqU $HOSTNAME NET-SNMP-EXTEND-MIB::nsExtendOutLine.\"zpoolusage\".$i | $CMD_AWK '{print $3}'`
	ZPOOL_FREE=`$CMD_SNMPGET -t 2 -r 2 -v 2c -c $COMMUNITY -OvqU $HOSTNAME NET-SNMP-EXTEND-MIB::nsExtendOutLine.\"zpoolusage\".$i | $CMD_AWK '{print $4}'`
	ZPOOL_CAP=`$CMD_SNMPGET -t 2 -r 2 -v 2c -c $COMMUNITY -OvqU $HOSTNAME NET-SNMP-EXTEND-MIB::nsExtendOutLine.\"zpoolusage\".$i | $CMD_AWK '{print $5}' | $CMD_SED 's/.$//'`
	ZPOOL_HEALTH=`$CMD_SNMPGET -t 2 -r 2 -v 2c -c $COMMUNITY -OvqU $HOSTNAME NET-SNMP-EXTEND-MIB::nsExtendOutLine.\"zpoolusage\".$i | $CMD_AWK '{print $7}'`
	
	if [ $WARNING != 0 ] || [ $CRITICAL != 0 ]; then
		if [ $ZPOOL_CAP -gt $CRITICAL ] && [ $CRITICAL != 0 ]; then
			STATE=$STATE_CRITICAL
			let "STATE_FLAG_CRIT++"
		elif [ $ZPOOL_CAP -gt $WARNING ] && [ $WARNING != 0 ]; then
			STATE=$STATE_WARNING
			let "STATE_FLAG_WARN++"
		else
			STATE=$STATE_OK
		fi
	else
		STATE=$STATE_OK
	fi

	if [ "$ZPOOL_HEALTH" != "ONLINE" ]; then
		let "STATE_FLAG_CRIT++"
	fi

	PERFDATA="$PERFDATA ${ZPOOL_NAME}_used=${ZPOOL_CAP}%;$WARNING;$CRITICAL;0;100"
	ZPOOL_USAGE="$ZPOOL_USAGE name=${ZPOOL_NAME},size=${ZPOOL_SIZE},alloc=${ZPOOL_ALLOC},free=${ZPOOL_FREE},health=${ZPOOL_HEALTH}"
done

if [ $STATE_FLAG_CRIT -gt 0 ]; then
	STATE=$STATE_CRITICAL
else
	if [ $STATE_FLAG_WARN -gt 0 ]; then
		STATE=$STATE_WARNING
	fi
fi

DESCRIPTION="ZPOOL usage: $ZPOOL_USAGE"

OUTPUT="${DESCRIPTION}| ${PERFDATA}"

echo $OUTPUT
exit $STATE
